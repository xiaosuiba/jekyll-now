<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on ChrisLi&#39;s Blog</title>
    <link>https://xiaosuiba.github.io/tags/code/</link>
    <description>Recent content in code on ChrisLi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://xiaosuiba.github.io/tags/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TKEStack v1.6.0 1.19版本中pod告警策略失效问题分析</title>
      <link>https://xiaosuiba.github.io/2021/04/13/tkestack-monitor-controller-issue/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiaosuiba.github.io/2021/04/13/tkestack-monitor-controller-issue/</guid>
      <description>日前在使用TKEStack v1.6.0的时候，发现针对工作负载的（也就是pod状态、重启次数）告警失效。我们进行了一定的分析，最终找到原因和</description>
    </item>
    
    <item>
      <title>TKEStack v1.6.0 global集群中serviceaccount总是默认拥有所有权限</title>
      <link>https://xiaosuiba.github.io/2021/04/06/tkestack-auth-api-issue/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiaosuiba.github.io/2021/04/06/tkestack-auth-api-issue/</guid>
      <description>TKEStack v1.6.0已经发布了，没有包含重大更新，但是在使用过程中，我们发现了一个很神奇的现象：global集群中任何serviceaccount</description>
    </item>
    
    <item>
      <title>TKEStack组件不能访问registry域名问题</title>
      <link>https://xiaosuiba.github.io/2021/03/31/tkestack-registry-dns-issue/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiaosuiba.github.io/2021/03/31/tkestack-registry-dns-issue/</guid>
      <description>TKEStack需要配置registry域名，默认为default.registry.tke.com，application组件将使用该域名</description>
    </item>
    
    <item>
      <title>Why rest.Storage interface have only one method</title>
      <link>https://xiaosuiba.github.io/2021/03/26/why-only-new-in-rest-storage-interface/</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiaosuiba.github.io/2021/03/26/why-only-new-in-rest-storage-interface/</guid>
      <description>Why rest.Storage interface have only one method While reading Kubernetes source code, I found one question really bothered me for several days. The common interface of rest storage is defined in /vendor/k8s.io/apiserver/pkg/registry/rest/rest.go:
type Storage interface { // New returns an empty object that can be used with Create and Update after request data has been put into it. 	// This object must be a pointer type for use with Codec.</description>
    </item>
    
    <item>
      <title>Kubernetes sample-apiserver 代码阅读</title>
      <link>https://xiaosuiba.github.io/2021/03/26/kubernetes-sample-apiserver/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiaosuiba.github.io/2021/03/26/kubernetes-sample-apiserver/</guid>
      <description>启动过程 main.go: func main() { logs.InitLogs() defer logs.FlushLogs() stopCh := genericapiserver.SetupSignalHandler() options := server.NewWardleServerOptions(os.Stdout, os.Stderr) cmd := server.NewCommandStartWardleServer(options, stopCh) cmd.Flags().AddGoFlagSet(flag.CommandLine) if err := cmd.Execute(); err != nil { klog.Fatal(err) } } options 调用 server.NewWardleServerOption 构建了一个 WardleServerOptions 配置对象 type WardleServerOptions struct { RecommendedOptions *genericoptions.RecommendedOptions SharedInformerFactory informers.SharedInformerFactory StdOut io.Writer StdErr io.Writer } RecommendedOptions 的解释为： // RecommendedOptions contains</description>
    </item>
    
  </channel>
</rss>
